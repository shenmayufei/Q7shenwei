package com.spd.qsevendemo.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_BEAN".
*/
public class DataBeanDao extends AbstractDao<DataBean, Long> {

    public static final String TABLENAME = "DATA_BEAN";

    /**
     * Properties of entity DataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Barcode = new Property(0, String.class, "barcode", false, "BARCODE");
        public final static Property Weight = new Property(1, String.class, "weight", false, "WEIGHT");
        public final static Property Tiji = new Property(2, String.class, "tiji", false, "TIJI");
        public final static Property Time = new Property(3, long.class, "time", true, "_id");
    }


    public DataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_BEAN\" (" + //
                "\"BARCODE\" TEXT," + // 0: barcode
                "\"WEIGHT\" TEXT," + // 1: weight
                "\"TIJI\" TEXT," + // 2: tiji
                "\"_id\" INTEGER PRIMARY KEY NOT NULL );"); // 3: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(1, barcode);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
 
        String tiji = entity.getTiji();
        if (tiji != null) {
            stmt.bindString(3, tiji);
        }
        stmt.bindLong(4, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(1, barcode);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
 
        String tiji = entity.getTiji();
        if (tiji != null) {
            stmt.bindString(3, tiji);
        }
        stmt.bindLong(4, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 3);
    }    

    @Override
    public DataBean readEntity(Cursor cursor, int offset) {
        DataBean entity = new DataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // barcode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // weight
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tiji
            cursor.getLong(offset + 3) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataBean entity, int offset) {
        entity.setBarcode(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWeight(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTiji(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataBean entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataBean entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
